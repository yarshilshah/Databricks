#######################################################
#######################################################
############    COPYRIGHT - DATA SOCIETY   ############
#######################################################
#######################################################

## AIML 102 DAY 2/AIML 102 PART 3 ##

## NOTE: To run individual pieces of code, select the line of code and
##       press ctrl + enter for PCs or command + enter for Macs




#=================================================-
#### Slide 4: Loading packages  ####

import pandas as pd
import numpy as np
import pickle
import os
import matplotlib.pyplot as plt
import plotly
import chart_studio.plotly as py
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import cufflinks as cf
from plotly import tools




#=================================================-
#### Slide 5: Directory settings  ####

data_dir = "/home/jovyan/iqvia-aiml-102/data"
plot_dir = "/home/jovyan/iqvia-aiml-102/plots"




#=================================================-
#### Slide 6: Loading datasets  ####

costa_viz = pickle.load(open(data_dir + "/costa_viz.sav","rb"))
costa_grouped_mean_long = pickle.load(open(data_dir + "/costa_grouped_mean_long.sav","rb"))
costa_grouped_mean_wide = pickle.load(open(data_dir + "/costa_grouped_mean_wide.sav","rb"))




#=================================================-
#### Slide 7: Complex univariate plots: violin plots  ####

plt.violinplot(costa_viz['ppl_total'],
               showmeans=False,  
               showmedians=True)
plt.show()




#=================================================-
#### Slide 9: Univariate plots: violin plot - cont'd  ####

plt.violinplot(costa_viz['ppl_total'], vert = False, showmeans=False, showmedians=True)
plt.xlabel('ppl_total')
plt.title('Number of people distribution')
plt.show()




#=================================================-
#### Slide 11: Compound visualizations: grids  ####

# Create a 2 x 2 figure and axes grid.
fig, axes = plt.subplots(2, 2) 
plt.show()




#=================================================-
#### Slide 12: Compound visualizations: axes  ####

print(axes)




#=================================================-
#### Slide 13: Compound visualizations: preparation  ####

costa_true_means = costa_grouped_mean_long.query('Target == True')[['metric','mean']]
bar_labels = costa_true_means['metric']
bar_heights = costa_true_means['mean']
num_bars = len(bar_heights)
bar_positions = np.arange(num_bars)

color_dict = {True: 'darkseagreen', 
              False: 'palevioletred'}
color = costa_viz['Target'].map(color_dict)




#=================================================-
#### Slide 14: Compound visualizations: axes - cont'd  ####

plt.figure(figsize = (8, 8))
fig, axes = plt.subplots(2, 2) 
axes[0, 0].hist(costa_viz['rooms'], 
                facecolor = 'goldenrod') 
plt.show()






#=================================================-
#### Slide 15: Compound visualizations: axes - cont'd  ####

plt.figure(figsize = (12, 8))
fig, axes = plt.subplots(2, 2)
color_dict = {True: 'darkseagreen', 
              False: 'palevioletred'}
color = costa_viz['Target'].map(color_dict)
axes[0, 0].hist(costa_viz['rooms'],
                facecolor = 'goldenrod') #<- set color
axes[0, 1].boxplot(costa_viz['ppl_total']) 
axes[1, 0].scatter(costa_viz['age'],
                   costa_viz['monthly_rent'],
                   c = color,
                   alpha = 0.3)
axes[1, 1].bar(bar_positions, bar_heights,
               color = "salmon")
plt.show()




#=================================================-
#### Slide 16: Compound visualizations: labeling axes  ####

# Histogram of rooms distribution.
axes[0, 0].set_ylabel('Frequency')
axes[0, 0].set_xlabel('rooms')

# Boxplot of ppl_total.
axes[0, 1].set_ylabel('Total number of people')

# Scatterplot of distribution.
axes[1, 0].set_xlabel('Age')
axes[1, 0].set_ylabel('Monthly rent')

# Mean values of categories of variable means based on Target.
axes[1, 1].set_ylabel('Mean Costa values')




#=================================================-
#### Slide 17: Compound visualizations: labeling ticks   ####

# No labels for ticks for boxplot.
axes[0, 1].xaxis.set_ticklabels([""])
# Tick positions set to bar positions in bar chart.
axes[1, 1].xaxis.set_ticks(bar_positions)

# Tick labels set to bar categories in bar chart.
axes[1, 1].xaxis.set_ticklabels(bar_labels,rotation = 18)




#=================================================-
#### Slide 18: Compound visualizations: figure adjustments  ####

plt.rcParams['axes.labelsize'] = 20
plt.rcParams['figure.titlesize'] = 25
fig.set_size_inches(18, 7.5)
fig.suptitle('Costa Data Summary')
plt.show()




#=================================================-
#### Slide 19: Compound visualizations: figure adjustments  ####

plt.clf()
plt.figure(figsize = (12, 8))
plt.rcParams.update({'font.size': 14})
fig, axes = plt.subplots(2, 2) 

axes[0, 0].hist(costa_viz['rooms'], 
                facecolor = 'goldenrod') #<- set color
axes[0, 1].boxplot(costa_viz['ppl_total']) 
axes[1, 0].scatter(costa_viz['age'],
            costa_viz['monthly_rent'],
            c = color,
           alpha = 0.3)
axes[1, 1].bar(bar_positions, bar_heights, color = "salmon")

# Histogram of hsd distribution.
axes[0, 0].set_ylabel('Frequency')
axes[0, 0].set_xlabel('rooms')

# Boxplot of nsd_master.
axes[0, 1].set_ylabel('Total number of people')

# Scatterplot of mrm vs mrc distribution..
axes[1, 0].set_xlabel('Age')
axes[1, 0].set_ylabel('Monthly rent')

# Mean values of categories of variable means based on mrc_class .
axes[1, 1].set_ylabel('Mean Costa values')

# No labels for ticks for boxplot.
axes[0, 1].xaxis.set_ticklabels([""])
# Tick positions set to bar positions in bar chart.
axes[1, 1].xaxis.set_ticks(bar_positions)

# Tick labels set to bar categories in bar chart.
axes[1, 1].xaxis.set_ticklabels(bar_labels,rotation=18)

plt.rcParams['axes.labelsize'] = 20
plt.rcParams['figure.titlesize'] = 25
fig.set_size_inches(18, 7.5)
fig.suptitle('Costa Data Summary')
plt.show()





#=================================================-
#### Slide 21: Exercise 1  ####






#=================================================-
#### Slide 23: Compound visualizations: layered plots  ####

plt.clf()                  #<- clear plotting area
fig, axes = plt.subplots() #<- create a new figure and axes objects for plotting




#=================================================-
#### Slide 24: Compound visualizations: layered plots  ####

for key, value in color_dict.items():

    age = costa_viz.query('Target=='+str(key))['age']
    monthly_rent = costa_viz.query('Target=='+str(key))['monthly_rent']

    if key == 0:
        Flag = "Vulnerable"
    else:
        Flag = "Non-vulnerable"

    axes.scatter(age, 
                 monthly_rent, 
                 c = value, 
                 label = Flag,
                 alpha = 0.3)
axes.legend()  #<- add a legend that would automatically get labels and colors from layers!   
plt.show()          




#=================================================-
#### Slide 25: Compound visualizations: layered plots - cont'd  ####

plt.show()




#=================================================-
#### Slide 26: Compound visualizations: layered plots - cont'd  ####

# We already have `Target` = `True` mean data.
print(costa_true_means)

# Let's get the `Target` = `False` mean data.
costa_false_means = costa_grouped_mean_long.query('Target == False')[['metric','mean']]
print(costa_false_means)




#=================================================-
#### Slide 27: Pickle summary dataframes  ####

pickle.dump(costa_true_means, open(data_dir + "/costa_true_means.sav","wb"))
pickle.dump(costa_false_means, open(data_dir + "/costa_false_means.sav","wb"))




#=================================================-
#### Slide 28: Compound visualizations: layered plots - cont'd  ####

# Mean values for `Target` = `False` data.
false_bar_heights = costa_false_means['mean'] 
# Mean values for `Target` = `True` data.
true_bar_heights = costa_true_means['mean']  
# Labels of bars, their width, and positions are shared for both categories.
bar_labels = costa_false_means['metric'] 
num_bars = len(bar_labels)
bar_positions = np.arange(num_bars)       
width = 0.35
# Clear the plotting area for the new plot.
plt.clf()
# Create the figure and axes objects.
fig, axes = plt.subplots()




#=================================================-
#### Slide 29: Compound visualizations: layered plots - cont'd  ####

false_bar_chart = axes.bar(bar_positions,          #<- set `false` bar positions
                            false_bar_heights,     #<- set `false` bar heights
                            width,                 #<- set width of the bars
                            color = color_dict[0]) #<- set color corresponding to `False` in dictionary
                            
true_bar_chart = axes.bar(bar_positions + width, #<- set `true` bar positions 
                          true_bar_heights,      #<- set `true` bar heights
                          width,                 #<- set width of the bars
                          color = color_dict[1]) #<- set color corresponding to `True` in dictionary





#=================================================-
#### Slide 30: Compound visualizations: layered plots - cont'd  ####

# Add text for labels, title and axes ticks.
axes.set_ylabel('Mean values')
axes.set_title('Costa metrics summary by Target')
axes.set_xticks(bar_positions + width/2)
axes.set_xticklabels(bar_labels)




#=================================================-
#### Slide 31: Compound visualizations: layered plots - cont'd  ####

# Add a legend for each chart and corresponding labels.
axes.legend((false_bar_chart, true_bar_chart), ('false', 'true'))
fig.set_size_inches(12, 4)
plt.show()




#=================================================-
#### Slide 33: Saving your plots  ####

fig.savefig(plot_dir + '/costa_metrics_by_target.png')




#=================================================-
#### Slide 34: Saving your data  ####

costa_grouped_mean_long.to_csv(data_dir + '/costa_summary_by_target.csv', 
                                   index = False)




#=================================================-
#### Slide 41: Using cufflinks with plotly  ####

import plotly as py
import cufflinks as cf




#=================================================-
#### Slide 44: Offline plotting with plotly - cont'd  ####

init_notebook_mode(connected = True)
cf.go_offline()




#######################################################
#######################################################
############    COPYRIGHT - DATA SOCIETY   ############
#######################################################
#######################################################

## AIML 102 DAY 2/AIML 102 PART 4 ##

## NOTE: To run individual pieces of code, select the line of code and
##       press ctrl + enter for PCs or command + enter for Macs




#=================================================-
#### Slide 3: Directory settings  ####

data_dir = "/home/jovyan/iqvia-aiml-102/data"
plot_dir = "/home/jovyan/iqvia-aiml-102/plots"




#=================================================-
#### Slide 4: Loading packages  ####

import pandas as pd
import numpy as np
import os
import pickle
import matplotlib.pyplot as plt
import plotly
import chart_studio.plotly as py
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import cufflinks as cf
from plotly import tools
init_notebook_mode(connected = True)
cf.go_offline()





#=================================================-
#### Slide 5: Costa Rica poverty dataset  ####

household_poverty = pd.read_csv(data_dir + "/costa_rica_poverty.csv")
costa_viz = pickle.load(open(data_dir + "/costa_viz.sav","rb"))
costa_true_means = pickle.load(open(data_dir + "/costa_true_means.sav","rb"))
costa_false_means = pickle.load(open(data_dir + "/costa_false_means.sav","rb"))




#=================================================-
#### Slide 7: Univariate plots: histogram  ####

costa_viz['rooms'].iplot(
  kind = 'hist',
  xTitle = 'Rooms',
  yTitle = 'Frequency',
  title = 'Rooms Distribution')




#=================================================-
#### Slide 8: Univariate plots: boxplot  ####

costa_viz['ppl_total'].iplot(
  kind ='box',
  theme = 'white',
  xTitle = 'ppl_total',
  title = 'Distribution of total number of people')  




#=================================================-
#### Slide 9: Customize themes  ####

cf.getThemes()
cf.set_config_file(theme = 'pearl')




#=================================================-
#### Slide 10: Univariate plots: bar chart  ####

costa_viz[['ppl_total', 'dependency_rate', 'num_adults', 'rooms', 'age']].mean().iplot(
  kind = 'bar', color = 'firebrick')




#=================================================-
#### Slide 11: Bivariate plots: scatterplot  ####

costa_viz.iplot(
  kind = 'scatter', 
  x = 'ppl_total', 
  y = 'num_adults',
  color = 'teal',
  title = 'Total people vs number of adults',
  mode = 'markers')  




#=================================================-
#### Slide 13: Multivariate plots: overlaid histogram  ####

# Plot overlaid histograms.
costa_viz[['rooms', 'num_adults']].iplot(
  kind = 'hist',
  barmode = 'overlay',
  xTitle = 'rooms and number of adults',
  yTitle = '(%) of frequency',
  title = 'Rooms and num_adults distribution')




#=================================================-
#### Slide 14: Multivariate plots: boxplot with multiple variables  ####

# Multiple boxplots.
costa_viz[['ppl_total', 'dependency_rate', 'num_adults', 'rooms', 'age']].iplot(
  kind = 'box',
  title = 'Costa Rican distribution')




#=================================================-
#### Slide 16: Customize color: map colors  ####

costa_viz["Target_class"] = np.where(costa_viz["Target"] == True, 'non-vulnerable', 'vulnerable')
costa_viz.iplot(
  kind='scatter', 
  x = 'ppl_total', 
  y = 'num_adults',
  categories = 'Target_class',
  title = 'ppl_total vs num_adults',
  xTitle = 'ppl_total',
  yTitle = 'num_adults',
  mode = 'markers',
  colorscale = 'set1')  




#=================================================-
#### Slide 19: Exercise 3  ####






#=================================================-
#### Slide 23: Simple scatterplot using plotly  ####

trace = go.Scatter(
    x = costa_viz['age'],
    y = costa_viz['monthly_rent'],
    mode = 'markers'
)

data = [trace]

iplot(data, filename = 'basic-scatter.html')




#=================================================-
#### Slide 25: Simple scatterplot using plotly - cont'd  ####

# Create a trace.
trace = go.Scatter(
  x = costa_viz['age'],
  y = costa_viz['monthly_rent'],
  mode = 'markers')

data = [trace]

layout = dict(
  title = 'Simple Scatterplot',
  xaxis = dict(title = 'Age', zeroline = False),
  yaxis = dict(title = 'Monthly rent', zeroline = False))

fig = dict(data = data, layout = layout)

iplot(fig, filename = 'basic-scatter')




#=================================================-
#### Slide 26: Simple scatterplot using plotly - cont'd  ####

# Create a trace.
trace = go.Scatter(
  x = costa_viz['age'],
  y = costa_viz['monthly_rent'],
  mode = 'markers')

data = [trace]

layout = dict(
  title = 'Simple Scatterplot',
  xaxis = dict(title = 'Age', zeroline = False),
  yaxis = dict(title = 'Monthly rent', zeroline = False))

fig = dict(data = data, layout = layout)

iplot(fig, filename = 'basic-scatter')




#=================================================-
#### Slide 27: Simple bar chart using plotly  ####

trace = go.Bar(
  y = household_poverty.Target.value_counts(), 
  x = ["NonVulnerable", "Moderate Poverty", "Vulnerable", "Extreme Poverty"],
  marker = dict(color = 'red', 
  opacity = 0.6))
               
layout = dict(
  title = "Household Poverty Levels", 
  margin = dict(l = 200), 
  width = 800, 
  height = 400)

data = [trace]




#=================================================-
#### Slide 28: Simple bar chart using plotly - cont'd  ####

fig = go.Figure(data = data, layout = layout)
iplot(fig, filename = 'basic-barchart')




#=================================================-
#### Slide 31: Inset plots: create traces  ####

# Create trace1.
trace1 = go.Bar(
  x = costa_false_means['metric'],
  y = costa_false_means['mean'],
  name = "False",
  marker = dict(color = 'darksalmon',
               line = dict(color = 'rgb(0,0,0)', width = .5)))
# Create trace2.
trace2 = go.Bar(
  x = costa_true_means['metric'],
  y = costa_true_means['mean'],
  name = "True",
  marker = dict(color = 'cornflowerblue',
                line = dict(color = 'rgb(0,0,0)', width = .5)))




#=================================================-
#### Slide 32: Inset plots: create traces - cont'd  ####

# Create trace3.
trace3 = go.Bar(
   y = household_poverty.Target.value_counts(), 
   x = ["NonVulnerable", "Moderate Poverty", "Vulnerable", "Extreme Poverty"],
   name = 'Poverty level', 
   marker = dict(color = 'red', opacity = 0.6),
   xaxis = 'x3', 
   yaxis = 'y3')

data = [trace1, trace2, trace3]




#=================================================-
#### Slide 33: Inset plots: create layout  ####

layout = go.Layout(
   barmode = "group",
   xaxis = dict(
   categoryorder = "category ascending"),
   xaxis3 = dict(
      domain = [0.6, 1],
      anchor = 'y3'),
   yaxis3 = dict(
      domain = [0.6, 1],
      anchor = 'x3'))
fig = go.Figure(data = data, layout = layout)
iplot(fig, filename = 'simple-inset')




#=================================================-
#### Slide 36: Saving your cufflinks plots   ####

fig = costa_viz['rooms'].iplot(kind = 'hist',
                         xTitle = 'Rooms',
                         yTitle = 'Frequency', 
                         title = 'Rooms Distribution',
                         asFigure = True)

plotly.offline.plot(fig, filename = plot_dir + "/pyplot-hist.html", auto_open = False)




#=================================================-
#### Slide 37: Saving your plotly plots  ####

trace = go.Scatter(
    x = costa_viz['age'],
    y = costa_viz['monthly_rent'],
    mode = 'markers')

data = [trace]

plotly.offline.plot(data, filename = plot_dir + '/basic-scatter.html', auto_open = False)



